Reg.data[-which(rownames(Reg.data)=='sub-028'),]
Reg.data[-which(rownames(Reg.data)=='sub-028'),]->Reg.data
cor.test(Reg.data[,'ll_RT'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'ll_slrt'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'ww_RT'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'Beta'],Reg.data[,'SSRT'])
Multi.reg1=lm(ll_RT~Beta+SSRT,data=Reg.data)
summary(Multi.reg1)
cor.test(Reg.data[,'ll_ac'],Reg.data[,'SSRT'])
Reg.data=data.frame(
ll_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'ll'],
ww_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'ww'],
wl_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'wl.u'],
ll_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'ll'],
ww_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'ww'],
wl_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'wl.u'],
ll_slrt=slowing[-which(rownames(slowing)%in%Ex.stop),'diff.ll'],
SSRT=STOP[,'SSRT'],
Beta=RL.model[[1]][-which(rownames(RL.model[[1]])%in%Ex.stop),'Beta'])
Stop[,which(STOP[,1]>150|STOP[,1]<550)]
STOP[,which(STOP[,1]>150|STOP[,1]<550)]
STOP[which(STOP[,1]>150|STOP[,1]<550),]
STOP[,1]>150
which(STOP[,1]>150|STOP[,1]<550)
STOP[which(STOP[,1]>150&STOP[,1]<550),]
cor.test(Reg.data[which(STOP[,1]>150&STOP[,1]<550),'ll_RT'],Reg.data[which(STOP[,1]>150&STOP[,1]<550),'SSRT'])
cor.test(Reg.data[which(STOP[,1]>150&STOP[,1]<550),'ll_slrt'],Reg.data[which(STOP[,1]>150&STOP[,1]<550),'SSRT'])
cor.test(Reg.data[which(STOP[,1]>150&STOP[,1]<550),'ww_RT'],Reg.data[which(STOP[,1]>150&STOP[,1]<550),'SSRT'])
cor.test(Reg.data[which(STOP[,1]>150&STOP[,1]<550),'Beta'],Reg.data[which(STOP[,1]>150&STOP[,1]<550),'SSRT'])
which(STOP[,1]>150&STOP[,1]<550)
length(which(STOP[,1]>150&STOP[,1]<550))
ex2=which(STOP[,1]>100&STOP[,1]<550)
cor.test(Reg.data[-ex2,'ll_RT'],Reg.data[ex2,'SSRT'])
cor.test(Reg.data[-ex2,'ll_RT'],Reg.data[-ex2,'SSRT'])
cor.test(Reg.data[-ex2,'ll_slrt'],Reg.data[-ex2,'SSRT'])
cor.test(Reg.data[,'ww_RT'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'Beta'],Reg.data[,'SSRT'])
colMeans(STOP) #ppn 28 lijkt een outlier op SSRT
STOP
STOP[,c('error','ommission')]
colMeans(STOP) #ppn 28 lijkt een outlier op SSRT
apply(STOP,2,sd)
colMeans(STOP) #ppn 28 lijkt een outlier op SSRT
apply(STOP,2,sd)
STOP
colMeans(STOP) #ppn 28 lijkt een outlier op SSRT
apply(STOP,2,sd)
t.test(STOP[,'MedRT'],STOP[,'MedSR'])
t.test(STOP[,'MRT'],STOP[,'MSR'])
t.test(STOP[,'MedRT'],STOP[,'MedSR'],paired=T)
t.test(STOP[,'MRT'],STOP[,'MSR'],paired=T)
colMeans(STOP) #ppn 28 lijkt een outlier op SSRT
apply(STOP,2,sd)
rm(list=ls())
#---------------      load preprocessed data files  ----------------------------#
load('./Processed_data/Behavior_Qpar.Rdat') # load summarized behavior and Qlearning estimates
load('./AG/Fitmodel/Fit_output/ConncetivityStrength_withBIC7models_MnoF.rdat')
#---------------        load libraries              ----------------------------#
library(MASS)
library(plotrix)
library(reshape2)
library(nlme)
require(multcomp)
library(ez)
RL_perf=RL$learn[,7:9]
# win,win (ww), lose,lose(ll), and win,lose (w,l)
RLwl.med=cbind(rowMeans(RL[[3]][,c(4,5,12)],na.rm=T),
rowMeans(RL[[3]][,c(9,11,15)],na.rm=T),rowMeans(RL[[3]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[3]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
RLwl.mean=cbind(rowMeans(RL[[2]][,c(4,5,12)],na.rm=T),
rowMeans(RL[[2]][,c(9,11,15)],na.rm=T),rowMeans(RL[[2]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[2]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
RLwl.ac=cbind(rowMeans(RL[[4]][,c(4,6,12)],na.rm=T),
rowMeans(RL[[4]][,c(9,11,15)],na.rm=T),rowMeans(RL[[4]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[4]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
# wl.u = win loose pairs not previously seen during learning
colnames(RLwl.med)=c('ww','ll','wl.u','wl')
colnames(RLwl.mean)=c('ww','ll','wl.u','wl')
colnames(RLwl.ac)=c('ww','ll','wl.u','wl')
# slowing
# RT
diff.ll=RLwl.med[,2]-RLwl.med[,3]
diff.ww=RLwl.med[,1]-RLwl.med[,3]
# accuracy
diff.ll.ac=RLwl.ac[,3]-RLwl.ac[,2]
diff.ww.ac=RLwl.ac[,3]-RLwl.ac[,1]
slowing=cbind(diff.ll,diff.ww, diff.ll.ac, diff.ww.ac)
# test
# is there a main effect of condition on
#accuracy: yes -> wl differs from ww and ll
RL.av.ac=as.data.frame(as.table(RLwl.ac[,1:3]))
colnames(RL.av.ac)=c('ppn','cond','AC')
lme_ac=lme(AC~cond,data=RL.av.ac,random=~1|ppn)
anova(lme_ac)
# dit is precies hetzelfde als repeated measures anova spps
summary(glht(lme_ac, linfct=mcp(cond = "Tukey")),
test = adjusted(type = "bonferroni"))
#RT: yes -> ll differs from wl and ww
RL.av.med=as.data.frame(as.table(RLwl.med[,1:3]))
colnames(RL.av.med)=c('ppn','cond','RT')
lme_medRT=lme(RT~cond,data=RL.av.med,random=~1|ppn)
anova(lme_medRT)
# dit is precies hetzelfde als repeated measures anova spps df(2,88)
summary(glht(lme_medRT, linfct=mcp(cond = "Tukey")),
test = adjusted(type = "bonferroni"))
cor.test(RL.model[[1]][,1], RL_perf[,1]); #AB learn
?cor.test
ACRT=merge(RL.av.ac, RL.av.med)
av.beta=as.data.frame(as.table(RL.model[[1]][,1]))
colnames(av.beta)=c('ppn','beta')
av.beta.beh= merge(ACRT,av.beta)
# accuracy, yes! main effect beta,cond, and interaction
AC_beta.av=ezANOVA(data=av.beta.beh,dv=AC,within=cond,between=beta,wid=ppn)
print(AC_beta.av)
# RT, yes! main effect beta,cond, and interaction
RT_beta.av=ezANOVA(data=av.beta.beh,dv=RT,within=cond,
between=beta,wid=ppn, return_aov = T)
print(RT_beta.av)
# lme results are same as ezANOVA (just checking :)
RT_ph=lme(RT~cond*beta,data= av.beta.beh,random=~1|ppn/cond)
anova(RT_ph)
colMeans(STOP)
apply(STOP,2,sd)
cor.test(Reg.data[,'ll_RT'],Reg.data[,'SSRT'])
Reg.data=data.frame(
ll_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'ll'],
ww_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'ww'],
wl_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'wl.u'],
ll_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'ll'],
ww_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'ww'],
wl_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'wl.u'],
ll_slrt=slowing[-which(rownames(slowing)%in%Ex.stop),'diff.ll'],
SSRT=STOP[,'SSRT'],
Beta=RL.model[[1]][-which(rownames(RL.model[[1]])%in%Ex.stop),'Beta'])
cor.test(Reg.data[,'ll_RT'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'ll_slrt'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'ww_RT'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'Beta'],Reg.data[,'SSRT'])
Multi.reg1=lm(ll_RT~Beta+SSRT,data=Reg.data)
summary(Multi.reg1)
bSTN.av=as.data.frame(as.table(Connectivity$b.Topstn[,c(1,2,3)]))
colnames(bSTN.av)=c('ppn','cond','beta')
bStr.av=as.data.frame(as.table(Connectivity$b.Topstr[,1:3]))
colnames(bStr.av)=c('ppn','cond','beta')
STN=data.frame(bSTN.av,connection='STN')
STR=data.frame(bStr.av,connection='STR')
TOP=as.data.frame(rbind(STN,STR))
# do anova
TOP.av=ezANOVA(data=TOP,dv=.(beta),within=.(cond,connection),wid=.(ppn))
print(TOP.av) # only  main effect for connection, connectivity towards STR is stronger
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll']) # yes, to LL RT
cor.test(Connectivity$b.Topstn[,2], RLwl.med[,2])
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll']) # yes, to LL RT
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll'])$p.value
?p.adjuest
?p.adjues
?p.adjust
p.adjust(p=c(p.llRT,p.betaQ,p.SSRT),method='bonferroni')
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll'])$p.value -> p.llRT
cor.test(Connectivity$b.Topstn[,'ll'], RL.model$learn[,'Beta'])$p.value -> p.betaQ
cor.test(Connectivity$b.Topstn[-which(rownames(Connectivity$b.Topstn)%in%Ex.stop),'ll'], STOP[,'SSRT'])$p.value -> p.SSRT
p.betaQ
p.adjust(p=c(p.llRT,p.betaQ,p.SSRT),method='bonferroni')
p.adjust(p=c(p.llRT,p.betaQ),method='bonferroni')
cor.test(Connectivity$b.Topstn[,'ww'], RL.model$learn[,'Beta'])
cor.test(Connectivity$b.Topstn[,'wl'], RL.model$learn[,'Beta'])
cor.test(Connectivity$b.Topstn[,'ll'], RL.model$learn[,'Beta']) # Yes!!
p.adjust(p=c(p.llRT,p.betaQ,p.SSRT),method='bonferroni')
p.adjust(p=c(p.llRT,p.betaQ),method='bonferroni')
p.adjust(p=c(p.llRT,p.betaQ),method='bonferroni')
cor.test(Connectivity$b.Topstn[-which(rownames(Connectivity$b.Topstn)%in%Ex.stop),'ll'], STOP[,'SSRT'])
p.adjust(p=c(p.llRT,p.betaQ, p.SSRT),method='bonferroni')
cor.test(Connectivity$b.Topstr[,'ll'], RLwl.med[,'ll']) # no
cor.test(Connectivity$b.Topstr[,'ll'], RL.model$learn[,'Beta'])
p.betaQ
cor.test(RLwl.med[,'ll'], RL.model$learn[,'Beta'],pareid=T)
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll'],paired=T) # yes, to LL RT
cor.test(RLwl.med[,'ll'], RL.model$learn[,'Beta'])
rm(list=ls())
#---------------      load preprocessed data files  ----------------------------#
load('./Processed_data/Behavior_Qpar.Rdat') # load summarized behavior and Qlearning estimates
load('./AG/Fitmodel/Fit_output/ConncetivityStrength_withBIC7models_MnoF.rdat')
#---------------        load libraries              ----------------------------#
library(MASS)
library(plotrix)
library(reshape2)
library(nlme)
require(multcomp)
library(ez)
RL_perf=RL$learn[,7:9]
# win,win (ww), lose,lose(ll), and win,lose (w,l)
RLwl.med=cbind(rowMeans(RL[[3]][,c(4,5,12)],na.rm=T),
rowMeans(RL[[3]][,c(9,11,15)],na.rm=T),rowMeans(RL[[3]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[3]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
RLwl.mean=cbind(rowMeans(RL[[2]][,c(4,5,12)],na.rm=T),
rowMeans(RL[[2]][,c(9,11,15)],na.rm=T),rowMeans(RL[[2]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[2]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
RLwl.ac=cbind(rowMeans(RL[[4]][,c(4,6,12)],na.rm=T),
rowMeans(RL[[4]][,c(9,11,15)],na.rm=T),rowMeans(RL[[4]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[4]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
# wl.u = win loose pairs not previously seen during learning
colnames(RLwl.med)=c('ww','ll','wl.u','wl')
colnames(RLwl.mean)=c('ww','ll','wl.u','wl')
colnames(RLwl.ac)=c('ww','ll','wl.u','wl')
# slowing
# RT
diff.ll=RLwl.med[,2]-RLwl.med[,3]
diff.ww=RLwl.med[,1]-RLwl.med[,3]
# accuracy
diff.ll.ac=RLwl.ac[,3]-RLwl.ac[,2]
diff.ww.ac=RLwl.ac[,3]-RLwl.ac[,1]
slowing=cbind(diff.ll,diff.ww, diff.ll.ac, diff.ww.ac)
# what is the relationship between control and learning
Reg.data=data.frame(
ll_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'ll'],
ww_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'ww'],
wl_RT=RLwl.med[-which(rownames(RLwl.med)%in%Ex.stop),'wl.u'],
ll_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'ll'],
ww_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'ww'],
wl_ac=RLwl.ac[-which(rownames(RLwl.med)%in%Ex.stop),'wl.u'],
ll_slrt=slowing[-which(rownames(slowing)%in%Ex.stop),'diff.ll'],
SSRT=STOP[,'SSRT'],
Beta=RL.model[[1]][-which(rownames(RL.model[[1]])%in%Ex.stop),'Beta'])
robreg_stop.llrt=rlm(ll_RT~SSRT,data=Reg.data)
robreg_stop.llrt
summary(robreg_stop.llrt)
rl.sum=summary(robreg_stop.llrt)
rl.dd=data.frame(rl.sum$coefficients)
rl.dd$pval=pt(rl.dd$t.value,rl.sum$df[2])
rl.dd
rl.dd$pval=2*pt(abs(rl.dd$t.value),rl.sum$df[2],lower.tail=F)
rl.dd
reg_stop.llrt=rl(ll_RT~SSRT,data=Reg.data)
reg.sum=summary(reg_stop.llrt)
reg.sum
reg_stop.llrt=lm(ll_RT~SSRT,data=Reg.data)
summary(robreg_stop.llrt)
summary(reg_stop.llrt)
robreg_stop.llrt=rlm(ll_RT~SSRT,data=Reg.data)
rl.sum=summary(robreg_stop.llrt)
rl.dd=data.frame(rl.sum$coefficients)
rl.dd$pval=2*pt(abs(rl.dd$t.value),rl.sum$df[2],lower.tail=F)
rl.dd
Reg.data
Reg.data[Reg.data['SSRT']<500,]
robreg_stop.llrt=rlm(ll_RT~SSRT,data=Reg.data)
reg.sum=summary(robreg_stop.llrt)
rl.dd=data.frame(reg.sum$coefficients)
rl.dd$pval=2*pt(abs(rl.dd$t.value),reg.sum$df[2],lower.tail=F)
rl.dd
robreg2_stop.llrt=rlm(ll_RT~SSRT,data=Reg.data[Reg.data['SSRT']<500,])
reg2.sum=summary(robreg2_stop.llrt)
rl2.dd=data.frame(reg2.sum$coefficients)
rl2.dd$pval=2*pt(abs(rl2.dd$t.value),reg2.sum$df[2],lower.tail=F)
rl2.dd
cor.test(Reg.data[,'ll_RT'],Reg.data[,'SSRT'])
cor.test(Reg.data[,'ll_slrt'],Reg.data[,'SSRT'])
rl2.dd
lm_stop.llrt=lm(ll_RT~SSRT,data=Reg.data)
lm.sum=summary(lm_stop.llrt)
lm.sum
lm2_stop.llrt=lm(ll_RT~SSRT,data=Reg.data[Reg.data['SSRT']<500,])
lm2.sum=summary(lm2_stop.llrt)
lm2.sum
robreg2_stop.llrt=rlm(ll_RT~SSRT,data=Reg.data[Reg.data['SSRT']<500,])
reg2.sum=summary(robreg2_stop.llrt)
rl2.dd=data.frame(reg2.sum$coefficients)
rl2.dd$pval=2*pt(abs(rl2.dd$t.value),reg2.sum$df[2],lower.tail=F)
rl2.dd
rl.dd
round(rl.dd,digits=2)
round(rl.dd,digits=3)
round(rl2.dd,digits=3)
reg.sum
rl.dd
rl2.dd
round(rl2.dd,digits=3)
round(rl.dd,digits=3)
rl.dd
reg.sum
reg2.sum
robreg_stop.wwrt=rlm(ww_RT~SSRT,data=Reg.data)
reg.sumww=summary(robreg_stop.wwrt)
rl.ddww=data.frame(reg.sumww$coefficients)
rl.ddww$pval=2*pt(abs(rl.ddww$t.value),reg.sumww$df[2],lower.tail=F)
rl.ddww
round(rl.ddww,digits=3)
robreg_stop.wwrt=rlm(ww_RT~SSRT,data=Reg.data[Reg.data['SSRT']<500,])
reg.sumww=summary(robreg_stop.wwrt)
rl.ddww=data.frame(reg.sumww$coefficients)
rl.ddww$pval=2*pt(abs(rl.ddww$t.value),reg.sumww$df[2],lower.tail=F)
rl.ddww
robreg_stop.beta=rlm(Beta~SSRT,data=Reg.data)
reg.sumbeta=summary(robreg_stop.beta)
rl.ddbeta=data.frame(reg.sumbeta$coefficients)
rl.ddbeta$pval=2*pt(abs(rl.ddbeta$t.value),reg.sumbeta$df[2],lower.tail=F)
robreg_stop.beta
reg.sumbeta
rl.ddbeta
robreg_stop.beta=rlm(Beta~SSRT,data=[Reg.data['SSRT']<500,])
reg.sumbeta=summary(robreg_stop.beta)
rl.ddbeta=data.frame(reg.sumbeta$coefficients)
rl.ddbeta$pval=2*pt(abs(rl.ddbeta$t.value),reg.sumbeta$df[2],lower.tail=F)
robreg_stop.beta=rlm(Beta~SSRT,data=Reg.data[Reg.data['SSRT']<500,])
reg.sumbeta=summary(robreg_stop.beta)
rl.ddbeta=data.frame(reg.sumbeta$coefficients)
rl.ddbeta$pval=2*pt(abs(rl.ddbeta$t.value),reg.sumbeta$df[2],lower.tail=F)
rl.ddbeta
Multi.reg1=rlm(ll_RT~Beta+SSRT,data=Reg.data)
Multi.reg1
summary(Multi.reg1)
robreg_stop.ll_ac=rlm(ll_ac~SSRT,data=Reg.data)
reg.sumllac=summary(robreg_stop.ll_ac)
rl.ddllac=data.frame(reg.sumllac$coefficients)
rl.ddllac$pval=2*pt(abs(rl.ddllac$t.value),reg.sumllac$df[2],lower.tail=F)
rl.ddllac
round(rl.ddllac,digits=3)
reg.sumllac
Multi.reg1=rlm(ll_RT~Beta+SSRT,data=Reg.data)
reg.summulti=summary(Multi.reg1)
rl.multi=data.frame(reg.summulti$coefficients)
rl.multi$pval=2*pt(abs(rl.multi$t.value),reg.summulti$df[2],lower.tail=F)
rl.multi
round(rl.multi,digits=3)
Multi.reg=lm(ll_RT~Beta+SSRT,data=Reg.data)
summary(Multi.reg)
round(rl.ddllac,digits=3)
round(rl.multi,digits=3)
bSTN.av=as.data.frame(as.table(Connectivity$b.Topstn[,c(1,2,3)]))
colnames(bSTN.av)=c('ppn','cond','beta')
bStr.av=as.data.frame(as.table(Connectivity$b.Topstr[,1:3]))
colnames(bStr.av)=c('ppn','cond','beta')
STN=data.frame(bSTN.av,connection='STN')
STR=data.frame(bStr.av,connection='STR')
TOP=as.data.frame(rbind(STN,STR))
Reg.data1=data.frame(ll_RT=RLwl.med[,'ll'],
llPFC_STN=Connectivity$b.Topstn[,'ll'],
llPFC_STR=Connectivity$b.Topstr[,'ll'],
Beta=RL.model$learn[,'Beta'])
r1=rlm(llPFC_STN~ll_RT,data=Reg.data1)
summar(r1)
summary(r1)
Reg.data1=data.frame(ll_RT=RLwl.med[,'ll'],
llPFC_STN=Connectivity$b.Topstn[,'ll'],
llPFC_STR=Connectivity$b.Topstr[,'ll'],
Beta=RL.model$learn[,'Beta'])
r1=rlm(llPFC_STN~ll_RT,data=Reg.data1)
summary(r1)
# how is top-down related to LL-behavior?
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll']) # yes, to LL RT
cor.test(Connectivity$b.Topstn[,'ll'], RLwl.med[,'ll'])$p.value -> p.llRT
# does top-STN connectviity on LL relate to explore/exploit?
cor.test(Connectivity$b.Topstn[,'ll'], RL.model$learn[,'Beta']) # Yes!!
cor.test(Connectivity$b.Topstn[,'ll'], RL.model$learn[,'Beta'])$p.value -> p.betaQ
# SSRT and hyperdirect
cor.test(Connectivity$b.Topstn[-which(rownames(Connectivity$b.Topstn)%in%Ex.stop),'ll'], STOP[,'SSRT'])
cor.test(Connectivity$b.Topstn[-which(rownames(Connectivity$b.Topstn)%in%Ex.stop),'ll'], STOP[,'SSRT'])$p.value -> p.SSRT
p.adjust(p=c(p.llRT,p.betaQ, p.SSRT),method='bonferroni')
p.adjust
p.adjust(p=c(p.llRT,p.betaQ, p.SSRT),method='bonferroni')
Reg.data1=data.frame(ll_RT=RLwl.med[,'ll'],
llPFC_STN=Connectivity$b.Topstn[,'ll'],
llPFC_STR=Connectivity$b.Topstr[,'ll'],
Beta=RL.model$learn[,'Beta'])
Multi.reg2=rlm(llPFC_STN ~Beta+ ll_RT,data=Reg.data1)
summary(Multi.reg2)
robreg_stop.llrt=rlm(ll_RT~SSRT,data=Reg.data)
reg.sum=summary(robreg_stop.llrt)
rl.dd=data.frame(reg.sum$coefficients)
rl.dd$pval=2*pt(abs(rl.dd$t.value),reg.sum$df[2],lower.tail=F)
round(rl.dd,digits=3)
robreg_stop.wwrt=rlm(ww_RT~SSRT,data=Reg.data)
reg.sumww=summary(robreg_stop.wwrt)
rl.ddww=data.frame(reg.sumww$coefficients)
rl.ddww$pval=2*pt(abs(rl.ddww$t.value),reg.sumww$df[2],lower.tail=F)
round(rl.ddww,digits=3)
robreg_stop.beta=rlm(Beta~SSRT,data=Reg.data)
reg.sumbeta=summary(robreg_stop.beta)
rl.ddbeta=data.frame(reg.sumbeta$coefficients)
rl.ddbeta$pval=2*pt(abs(rl.ddbeta$t.value),reg.sumbeta$df[2],lower.tail=F)
round(rl.ddbeta,digits=3)
Multi.reg1=rlm(ll_RT~Beta+SSRT,data=Reg.data)
reg.summulti=summary(Multi.reg1)
rl.multi=data.frame(reg.summulti$coefficients)
rl.multi$pval=2*pt(abs(rl.multi$t.value),reg.summulti$df[2],lower.tail=F)
round(rl.multi,digits=3)
reg.summulti
round(rl.multi,digits=3)
robreg_stop.ll_ac=rlm(ll_ac~SSRT,data=Reg.data)
reg.sumllac=summary(robreg_stop.ll_ac)
rl.ddllac=data.frame(reg.sumllac$coefficients)
rl.ddllac$pval=2*pt(abs(rl.ddllac$t.value),reg.sumllac$df[2],lower.tail=F)
rl.ddllac
round(rl.ddllac,digits=3)
cor.test(Connectivity$b.Topstr[,'ll'], RL.model$learn[,'Beta'])
load('./Processed_data/Behavior_Qpar.Rdat') # load summarized behavior and Qlearning estimates
load('./AG/Fitmodel/Fit_output/ConncetivityStrength_withBIC7models_MnoF.rdat')
ls()
Connectivity
beta.testRLag4.MnoF
beta.testRLag4.MnoF[[1]]
set.seed(223)
x1 <- rnorm(100)
x2 <- x1 + rnorm(100,sd=0.5)
x3 <- x1 + x2 + rnorm(100,sd=0.5)
connecties waar de beta’s negatief zijn juist in het gedefinieerde model. Kan dat? Kan zeker, maar dan is er vaak een collider node, zoals in
x3
cor2pcor(cor(cbind(x1,x2,x3)))
library(ppcor)
set.seed(223)
x1 <- rnorm(100)
x2 <- x1 + rnorm(100,sd=0.5)
x3 <- x1 + x2 + rnorm(100,sd=0.5)
cor2pcor(cor(cbind(x1,x2,x3)))
install.packages('corpcor')
ls
ls()
library(cor2pcor)
library(corpcor)
cor2pcor(cor(cbind(x1,x2,x3)))
cor(cbind(x1,x2,x3))
rm(list=ls())
#---------------      load preprocessed data files  ----------------------------#
load('./Processed_data/Behavior_Qpar.Rdat') # load summarized behavior and Qlearning estimates
load('./AG/Fitmodel/Fit_output/ConncetivityStrength_withBIC7models_MnoF.rdat')
#---------------        load libraries              ----------------------------#
library(MASS)
library(plotrix)
library(reshape2)
library(nlme)
require(multcomp)
library(ez)
RL_perf=RL$learn[,7:9]
# win,win (ww), lose,lose(ll), and win,lose (w,l)
RLwl.med=cbind(rowMeans(RL[[3]][,c(4,5,12)],na.rm=T),
rowMeans(RL[[3]][,c(9,11,15)],na.rm=T),rowMeans(RL[[3]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[3]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
RLwl.mean=cbind(rowMeans(RL[[2]][,c(4,5,12)],na.rm=T),
rowMeans(RL[[2]][,c(9,11,15)],na.rm=T),rowMeans(RL[[2]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[2]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
RLwl.ac=cbind(rowMeans(RL[[4]][,c(4,6,12)],na.rm=T),
rowMeans(RL[[4]][,c(9,11,15)],na.rm=T),rowMeans(RL[[4]][,c(6:7,8,13,10,14)],na.rm=T),rowMeans(RL[[4]][,c(1:3,6:7,8,13,10,14)],na.rm=T))
# wl.u = win loose pairs not previously seen during learning
colnames(RLwl.med)=c('ww','ll','wl.u','wl')
colnames(RLwl.mean)=c('ww','ll','wl.u','wl')
colnames(RLwl.ac)=c('ww','ll','wl.u','wl')
# slowing
# RT
diff.ll=RLwl.med[,2]-RLwl.med[,3]
diff.ww=RLwl.med[,1]-RLwl.med[,3]
# accuracy
diff.ll.ac=RLwl.ac[,3]-RLwl.ac[,2]
diff.ww.ac=RLwl.ac[,3]-RLwl.ac[,1]
slowing=cbind(diff.ll,diff.ww, diff.ll.ac, diff.ww.ac)
# test
# is there a main effect of condition on
#accuracy: yes -> wl differs from ww and ll
RL.av.ac=as.data.frame(as.table(RLwl.ac[,1:3]))
colnames(RL.av.ac)=c('ppn','cond','AC')
lme_ac=lme(AC~cond,data=RL.av.ac,random=~1|ppn)
anova(lme_ac)
# dit is precies hetzelfde als repeated measures anova spps
summary(glht(lme_ac, linfct=mcp(cond = "Tukey")),
test = adjusted(type = "bonferroni"))
#RT: yes -> ll differs from wl and ww
RL.av.med=as.data.frame(as.table(RLwl.med[,1:3]))
colnames(RL.av.med)=c('ppn','cond','RT')
lme_medRT=lme(RT~cond,data=RL.av.med,random=~1|ppn)
anova(lme_medRT)
# dit is precies hetzelfde als repeated measures anova spps df(2,88)
summary(glht(lme_medRT, linfct=mcp(cond = "Tukey")),
test = adjusted(type = "bonferroni"))
#----------- startegy and learning phase accuracy --------------#
# beta and learningphase accuracy
#apply(RL_perf,2,mean);apply(RL_perf,2,sd)
cor.test(RL.model[[1]][,1], RL_perf[,1]); #AB learn
cor.test(RL.model[[1]][,1], RL_perf[,2]);#cd learn
cor.test(RL.model[[1]][,1], RL_perf[,3])#ef learn
#----------- RM anova with Strategy and Condition --------------#
# prepare data
ACRT=merge(RL.av.ac, RL.av.med)
av.beta=as.data.frame(as.table(RL.model[[1]][,1]))
colnames(av.beta)=c('ppn','beta')
av.beta.beh= merge(ACRT,av.beta)
# accuracy, yes! main effect beta,cond, and interaction
AC_beta.av=ezANOVA(data=av.beta.beh,dv=AC,within=cond,between=beta,wid=ppn)
print(AC_beta.av)
# RT, yes! main effect beta,cond, and interaction
RT_beta.av=ezANOVA(data=av.beta.beh,dv=RT,within=cond,
between=beta,wid=ppn, return_aov = T)
print(RT_beta.av)
# lme results are same as ezANOVA (just checking :)
RT_ph=lme(RT~cond*beta,data= av.beta.beh,random=~1|ppn/cond)
anova(RT_ph)
bSTN.av=as.data.frame(as.table(Connectivity$b.Topstn[,c(1,2,3)]))
colnames(bSTN.av)=c('ppn','cond','beta')
bStr.av=as.data.frame(as.table(Connectivity$b.Topstr[,1:3]))
colnames(bStr.av)=c('ppn','cond','beta')
STN=data.frame(bSTN.av,connection='STN')
STR=data.frame(bStr.av,connection='STR')
TOP=as.data.frame(rbind(STN,STR))
# do anova
TOP.av=ezANOVA(data=TOP,dv=.(beta),within=.(cond,connection),wid=.(ppn))
print(TOP.av) # only  main effect for connection, connectivity towards STR is stronger
Reg.data1=data.frame(ll_RT=RLwl.med[,'ll'],
llPFC_STN=Connectivity$b.Topstn[,'ll'],
llPFC_STR=Connectivity$b.Topstr[,'ll'],
Beta=RL.model$learn[,'Beta'])
robreg_stn.llrt=rlm(ll_RT~llPFC_STN,data=Reg.data1)
reg.sum.stn=summary(robreg_stn.llrt)
rl.dd.stn=data.frame(reg.sum.stn$coefficients)
rl.dd.stn$pval=2*pt(abs(rl.dd.stn$t.value),reg.sum.stn$df[2],lower.tail=F)
rl.dd.stn
summary(robreg_stn.llrt)
length(RLwl.med[,'ll'])
robreg_stn.beta=rlm(Beta~llPFC_STN,data=Reg.data1)
reg.sum.stnb=summary(robreg_stn.beta)
rl.dd.stnb=data.frame(reg.sum.stnb$coefficients)
rl.dd.stnb$pval=2*pt(abs(rl.dd.stnb$t.value),reg.sum.stnb$df[2],lower.tail=F)
rl.dd.stnb
