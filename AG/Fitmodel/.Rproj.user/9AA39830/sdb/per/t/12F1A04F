{
    "collab_server" : "",
    "contents" : "# define conditions for AG model fitting testphase RT task Control and Conflict\n\n# define conditions for AG model fitting davinci\n\n# load library\n#load(paste(dir_data,\"/Singletrial_connectivityinputAG_RLtest.rdat\",sep='')) # no-ftest\nload(paste(dir_data,\"/singletrial_fMRIinputAG_RLtest.Rdat\",sep='')) # no-ftest\nyDat=yDat.RL\n\n#################################################\n\n\t# correct trials\n\tAbL= list();AbR= list()\n\tCdL= list();CdR= list()\n\tEfL= list();EfR= list()\n\tAcL= list();AcR= list()\n\tAdL= list();AdR= list()\n\tAeL= list();AeR= list()\n\tAfL= list();AfR= list()\n\tbCL= list();bCR= list()\n\tbDL= list();bDR= list()\n\tbEL= list();bER= list()\n\tbFL= list();bFR= list()\n\tCeL= list();CeR= list()\n\tCfL= list();CfR= list()\n\tdEL= list();dER= list()\n\tdFL= list();dFR= list()\n\n\terror= list();miss= list() # zet hier alle errors samen\n\t\t\n\t# collapsed over hand\n\t\n\tAb= list()\n\tCd= list()\n\tEf= list()\n\tAc= list()\n\tAd= list()\n\tAe= list()\n\tAf= list()\n\tbC= list()\n\tbD= list()\n\tbE= list()\n\tbF= list()\n\tCe= list()\n\tCf= list()\n\tdE= list()\n\tdF= list()\n\t\n\t# collapsed over approach, avoid (pure: with all trials, strong: with bd,ac removed)\n\t\n\t# approach (pure, p; strong, s) \n\tpApAL=list();pApAR=list();pApA=list()\n\tsApAL=list();sApAR=list();sApA=list()\n\t# avoid (pure, p; strong, s) \n\tpAvBL=list();pAvBR=list();pAvB=list()\n\tsAvBL=list();sAvBR=list();sAvB=list()\n\t\n\t# approach (pure, p; strong, s) - error + incorrect\n\tepApAL=list();epApAR=list();epApA=list()\n\tesApAL=list();esApAR=list();esApA=list()\n\t# avoid (pure, p; strong, s) \n\tepAvBL=list();epAvBR=list();epAvB=list()\n\tesAvBL=list();esAvBR=list();esAvB=list()\n\t\n\t# collapsed over ww, ll, wl\n\t\n\twwL=list();wwR=list();ww=list()\n\tllL=list();llR=list();ll=list()\n\twlL=list();wlR=list();wl=list()\n\t\n\t# pure trials with no learning phase example\n\tpwlL=list();pwlR=list();pwl=list()\n\t\n\t# divide wl in big, medium, small\n\tBwlL=list();BwlR=list();Bwl=list()\n\tMwlL=list();MwlR=list();Mwl=list()\n\tSwlL=list();SwlR=list();Swl=list()\n\n\t# correct + incorrect trials\n\teAbL= list();eAbR= list()\n\teCdL= list();eCdR= list()\n\teEfL= list();eEfR= list()\n\teAcL= list();eAcR= list()\n\teAdL= list();eAdR= list()\n\teAeL= list();eAeR= list()\n\teAfL= list();eAfR= list()\n\tebCL= list();ebCR= list()\n\tebDL= list();ebDR= list()\n\tebEL= list();ebER= list()\n\tebFL= list();ebFR= list()\n\teCeL= list();eCeR= list()\n\teCfL= list();eCfR= list()\n\tedEL= list();edER= list()\n\tedFL= list();edFR= list()\n\n\t\t\n\t# collapsed over hand\n\t\n\teAb= list()\n\teCd= list()\n\teEf= list()\n\teAc= list()\n\teAd= list()\n\teAe= list()\n\teAf= list()\n\tebC= list()\n\tebD= list()\n\tebE= list()\n\tebF= list()\n\teCe= list()\n\teCf= list()\n\tedE= list()\n\tedF= list()\n\t\n\t# collapsed over ww, ll, wl\n\t\n\tewwL=list();ewwR=list();eww=list()\n\tellL=list();ellR=list();ell=list()\n\tewlL=list();ewlR=list();ewl=list()\n\t\n\t# pure trials with no learning phase example\n\tepwlL=list();epwlR=list();epwl=list()\n\n\t# divide wl in big, medium, small - correct + incorrect\n\teBwlL=list();eBwlR=list();eBwl=list()\n\teMwlL=list();eMwlR=list();eMwl=list()\n\teSwlL=list();eSwlR=list();eSwl=list()\n\n\t######################################################\n\n\tfor (c in 1:length(yDat))\n\t\n\t\t{\t\n\t\t\t# seperate errors form rest\n\t\t\ttest=yDat[[c]][-grep('error', yDat[[c]]$type),]\n\t\t\terror[[c]]=yDat[[c]][grep('error', yDat[[c]]$type),]\n\t\t\tmiss[[c]]=yDat[[c]][grep('Miss', yDat[[c]]$type),]\n\t\t\t\n\t\t\tAbL[[c]] =grep('AbL', test$type);AbR[[c]] =grep('AbR', test$type);Ab[[c]]=c(AbL[[c]],AbR[[c]])\n\t\t\tCdL[[c]] =grep('CdL', test$type);CdR[[c]] =grep('CdR', test$type);Cd[[c]]=c(CdL[[c]],CdR[[c]])\n\t\t\tEfL[[c]] =grep('EfL', test$type);EfR[[c]] =grep('EfR', test$type);Ef[[c]]=c(EfL[[c]],EfR[[c]])\n\t\t\tAcL[[c]] =grep('AcL', test$type);AcR[[c]] =grep('AcR', test$type);Ac[[c]]=c(AcL[[c]],AcR[[c]])\n\t\t\tAdL[[c]] =grep('AdL', test$type);AdR[[c]] =grep('AdR', test$type);Ad[[c]]=c(AdL[[c]],AdR[[c]])\n\t\t\tAeL[[c]] =grep('AeL', test$type);AeR[[c]] =grep('AeR', test$type);Ae[[c]]=c(AeL[[c]],AeR[[c]])\n\t\t\tAfL[[c]] =grep('AfL', test$type);AfR[[c]] =grep('AfR', test$type);Af[[c]]=c(AfL[[c]],AfR[[c]])\n\t\t\tbCL[[c]] =grep('bCL', test$type);bCR[[c]] =grep('bCR', test$type);bC[[c]]=c(bCL[[c]],bCR[[c]])\n\t\t\tbDL[[c]] =grep('bDL', test$type);bDR[[c]] =grep('bDR', test$type);bD[[c]]=c(bDL[[c]],bDR[[c]])\n\t\t\tbEL[[c]] =grep('bEL', test$type);bER[[c]] =grep('bER', test$type);bE[[c]]=c(bEL[[c]],bER[[c]])\n\t\t\tbFL[[c]] =grep('bFL', test$type);bFR[[c]] =grep('bFR', test$type);bF[[c]]=c(bFL[[c]],bFR[[c]])\n\t\t\tCeL[[c]] =grep('CeL', test$type);CeR[[c]] =grep('CeR', test$type);Ce[[c]]=c(CeL[[c]],CeR[[c]])\n\t\t\tCfL[[c]] =grep('CfL', test$type);CfR[[c]] =grep('CfR', test$type);Cf[[c]]=c(CfL[[c]],CfR[[c]])\n\t\t\tdEL[[c]] =grep('dEL', test$type);dER[[c]] =grep('dER', test$type);dE[[c]]=c(dEL[[c]],dER[[c]])\n\t\t\tdFL[[c]] =grep('dFL', test$type);dFR[[c]] =grep('dFR', test$type);dF[[c]]=c(dFL[[c]],dFR[[c]])\n\t\t\t\n\t\t\t\n\t\t\t# approach (pure, p; strong, s) \n\t\t\t\tpApAL[[c]]=c(AcL[[c]],AdL[[c]],AeL[[c]],AfL[[c]]);\n\t\t\t\tpApAR[[c]]=c(AcR[[c]],AdR[[c]],AeR[[c]],AfR[[c]]);\n\t\t\t\tpApA[[c]]=c(pApAL[[c]],pApAR[[c]])\n\t\t\t\t\t\n\t\t\t\t\tsApAL[[c]]=c(AdL[[c]],AeL[[c]],AfL[[c]]);\n\t\t\t\t\tsApAR[[c]]=c(AdR[[c]],AeR[[c]],AfR[[c]]);\n\t\t\t\t\tsApA[[c]]=c(sApAL[[c]],sApAR[[c]])\t\t\n\t\t\t\n\t\t\t# avoid (pure, p; strong, s) \n\t\t\t\tpAvBL[[c]]=c(bCL[[c]],bDL[[c]],bEL[[c]],bFL[[c]]);\n\t\t\t\tpAvBR[[c]]=c(bCR[[c]],bDR[[c]],bER[[c]],bFR[[c]]);\n\t\t\t\tpAvB[[c]]=c(pAvBL[[c]],pAvBR[[c]])\n\t\t\t\t\t\n\t\t\t\t\tsAvBL[[c]]=c(bCL[[c]],bEL[[c]],bFL[[c]]);\n\t\t\t\t\tsAvBR[[c]]=c(bCR[[c]],bER[[c]],bFR[[c]]);\n\t\t\t\t\tsAvB[[c]]=c(sAvBL[[c]],sAvBR[[c]])\n\t\t\t\n\t\t\t\n\t\t\t# collapsed over ww, ll, wl\n\t\t\twwL[[c]]=c(AcL[[c]],AeL[[c]],CeL[[c]]);\n\t\t\twwR[[c]]=c(AcR[[c]],AeR[[c]],CeR[[c]]);\n\t\t\tww[[c]]=c(wwL[[c]],wwR[[c]]);\n\t\t\t\n\t\t\tllL[[c]]=c(bDL[[c]],bFL[[c]],dFL[[c]]);\n\t\t\tllR[[c]]=c(bDR[[c]],bFR[[c]],dFR[[c]]);\n\t\t\tll[[c]]=c(llL[[c]],llR[[c]]);\n\t\t\t\n\t\t\twlL[[c]]=c(AbL[[c]],CdL[[c]],EfL[[c]],AdL[[c]],AfL[[c]],bCL[[c]],bEL[[c]],CfL[[c]],dEL[[c]]);\n\t\t\twlR[[c]]=c(AbR[[c]],CdR[[c]],EfR[[c]],AdR[[c]],AfR[[c]],bCR[[c]],bER[[c]],CfR[[c]],dER[[c]]);\n\t\t\twl[[c]]=c(wlL[[c]],wlR[[c]])\n\t\t\t\n\t\t\t# pure\n\t\t\tpwlL[[c]]=c(AdL[[c]],AfL[[c]],bCL[[c]],bEL[[c]],CfL[[c]],dEL[[c]]);\n\t\t\tpwlR[[c]]=c(AdR[[c]],AfR[[c]],bCR[[c]],bER[[c]],CfR[[c]],dER[[c]]);\n\t\t\tpwl[[c]]=c(pwlL[[c]],pwlR[[c]])\n\t\t\t\n\t\t\t# wl Big\n\t\t\tBwlL[[c]]=c(AdL[[c]],bCL[[c]]);\n\t\t\tBwlR[[c]]=c(AdR[[c]],bCR[[c]]);\n\t\t\tBwl[[c]]=c(BwlL[[c]],BwlR[[c]])\n\t\t\t\n\t\t\t# wl medium\n\t\t\tMwlL[[c]]=c(AfL[[c]],bEL[[c]]);\n\t\t\tMwlR[[c]]=c(AfR[[c]],bER[[c]]);\n\t\t\tMwl[[c]]=c(MwlL[[c]],MwlR[[c]])\n\t\t\t\n\t\t\t# wl small\n\t\t\tSwlL[[c]]=c(CfL[[c]],dEL[[c]]);\n\t\t\tSwlR[[c]]=c(CfR[[c]],dER[[c]]);\n\t\t\tSwl[[c]]=c(SwlL[[c]],SwlR[[c]])\n\t\t\t\n\t\t\t\n\t\t\t# now for error and non error trials combined\n\t\t\t\n\t\t\teAbL[[c]] =grep('AbL', yDat[[c]]$type);eAbR[[c]] =grep('AbR', yDat[[c]]$type);eAb[[c]]=c(eAbL[[c]],eAbR[[c]])\n\t\t\teCdL[[c]] =grep('CdL', yDat[[c]]$type);eCdR[[c]] =grep('CdR', yDat[[c]]$type);eCd[[c]]=c(eCdL[[c]],eCdR[[c]])\n\t\t\teEfL[[c]] =grep('EfL', yDat[[c]]$type);eEfR[[c]] =grep('EfR', yDat[[c]]$type);eEf[[c]]=c(eEfL[[c]],eEfR[[c]])\n\t\t\teAcL[[c]] =grep('AcL', yDat[[c]]$type);eAcR[[c]] =grep('AcR', yDat[[c]]$type);eAc[[c]]=c(eAcL[[c]],eAcR[[c]])\n\t\t\teAdL[[c]] =grep('AdL', yDat[[c]]$type);eAdR[[c]] =grep('AdR', yDat[[c]]$type);eAd[[c]]=c(eAdL[[c]],eAdR[[c]])\n\t\t\teAeL[[c]] =grep('AeL', yDat[[c]]$type);eAeR[[c]] =grep('AeR', yDat[[c]]$type);eAe[[c]]=c(eAeL[[c]],eAeR[[c]])\n\t\t\teAfL[[c]] =grep('AfL', yDat[[c]]$type);eAfR[[c]] =grep('AfR', yDat[[c]]$type);eAf[[c]]=c(eAfL[[c]],eAfR[[c]])\n\t\t\tebCL[[c]] =grep('bCL', yDat[[c]]$type);ebCR[[c]] =grep('bCR', yDat[[c]]$type);ebC[[c]]=c(ebCL[[c]],ebCR[[c]])\n\t\t\tebDL[[c]] =grep('bDL', yDat[[c]]$type);ebDR[[c]] =grep('bDR', yDat[[c]]$type);ebD[[c]]=c(ebDL[[c]],ebDR[[c]])\n\t\t\tebEL[[c]] =grep('bEL', yDat[[c]]$type);ebER[[c]] =grep('bER', yDat[[c]]$type);ebE[[c]]=c(ebEL[[c]],ebER[[c]])\n\t\t\tebFL[[c]] =grep('bFL', yDat[[c]]$type);ebFR[[c]] =grep('bFR', yDat[[c]]$type);ebF[[c]]=c(ebFL[[c]],ebFR[[c]])\n\t\t\teCeL[[c]] =grep('CeL', yDat[[c]]$type);eCeR[[c]] =grep('CeR', yDat[[c]]$type);eCe[[c]]=c(eCeL[[c]],eCeR[[c]])\n\t\t\teCfL[[c]] =grep('CfL', yDat[[c]]$type);eCfR[[c]] =grep('CfR', yDat[[c]]$type);eCf[[c]]=c(eCfL[[c]],eCfR[[c]])\n\t\t\tedEL[[c]] =grep('dEL', yDat[[c]]$type);edER[[c]] =grep('dER', yDat[[c]]$type);edE[[c]]=c(edEL[[c]],edER[[c]])\n\t\t\tedFL[[c]] =grep('dFL', yDat[[c]]$type);edFR[[c]] =grep('dFR', yDat[[c]]$type);edF[[c]]=c(edFL[[c]],edFR[[c]])\n\t\t\t\n\t\t\t# approach (pure, p; strong, s) \n\t\t\t\tepApAL[[c]]=c(eAcL[[c]],eAdL[[c]],eAeL[[c]],eAfL[[c]]);\n\t\t\t\tepApAR[[c]]=c(eAcR[[c]],eAdR[[c]],eAeR[[c]],eAfR[[c]]);\n\t\t\t\tepApA[[c]]=c(epApAL[[c]],epApAR[[c]])\n\t\t\t\t\t\n\t\t\t\t\tesApAL[[c]]=c(eAdL[[c]],eAeL[[c]],eAfL[[c]]);\n\t\t\t\t\tesApAR[[c]]=c(eAdR[[c]],eAeR[[c]],eAfR[[c]]);\n\t\t\t\t\tesApA[[c]]=c(esApAL[[c]],esApAR[[c]])\t\t\n\t\t\t\n\t\t\t# avoid (pure, p; strong, s) \n\t\t\t\tepAvBL[[c]]=c(ebCL[[c]],ebDL[[c]],ebEL[[c]],ebFL[[c]]);\n\t\t\t\tepAvBR[[c]]=c(ebCR[[c]],ebDR[[c]],ebER[[c]],ebFR[[c]]);\n\t\t\t\tepAvB[[c]]=c(epAvBL[[c]],epAvBR[[c]])\n\t\t\t\t\t\n\t\t\t\t\tesAvBL[[c]]=c(ebCL[[c]],ebEL[[c]],ebFL[[c]]);\n\t\t\t\t\tesAvBR[[c]]=c(ebCR[[c]],ebER[[c]],ebFR[[c]]);\n\t\t\t\t\tesAvB[[c]]=c(esAvBL[[c]],esAvBR[[c]])\n\t\t\t\t\n\t\t\t# collapsed over ww, ll, wl\n\t\t\tewwL[[c]]=c(eAcL[[c]],eAeL[[c]],eCeL[[c]]);\n\t\t\tewwR[[c]]=c(eAcR[[c]],eAeR[[c]],eCeR[[c]]);\n\t\t\teww[[c]]=c(ewwL[[c]],ewwR[[c]]);\n\t\t\t\n\t\t\tellL[[c]]=c(ebDL[[c]],ebFL[[c]],edFL[[c]]);\n\t\t\tellR[[c]]=c(ebDR[[c]],ebFR[[c]],edFR[[c]]);\n\t\t\tell[[c]]=c(ellL[[c]],ellR[[c]]);\n\t\t\t\n\t\t\tewlL[[c]]=c(eAbL[[c]],eCdL[[c]],eEfL[[c]],eAdL[[c]],eAfL[[c]],ebCL[[c]],ebEL[[c]],eCfL[[c]],edEL[[c]]);\n\t\t\tewlR[[c]]=c(eAbR[[c]],eCdR[[c]],eEfR[[c]],eAdR[[c]],eAfR[[c]],ebCR[[c]],ebER[[c]],eCfR[[c]],edER[[c]]);\n\t\t\tewl[[c]]=c(ewlL[[c]],ewlR[[c]])\n\t\t\t\n\t\t\t\t\t\t\t\n\t\t\tepwlL[[c]]=c(eAdL[[c]],eAfL[[c]],ebCL[[c]],ebEL[[c]],eCfL[[c]],edEL[[c]]);\n\t\t\tepwlR[[c]]=c(eAdR[[c]],eAfR[[c]],ebCR[[c]],ebER[[c]],eCfR[[c]],edER[[c]]);\n\t\t\tepwl[[c]]=c(epwlL[[c]],epwlR[[c]])\n\t\t\t\n\t\t\t\n\t\t\t# wl Big (50)\n\t\t\teBwlL[[c]]=c(eAdL[[c]],ebCL[[c]]);\n\t\t\teBwlR[[c]]=c(eAdR[[c]],ebCR[[c]]);\n\t\t\teBwl[[c]]=c(eBwlL[[c]],eBwlR[[c]])\n\t\t\t\n\t\t\t# wl medium (40)\n\t\t\teMwlL[[c]]=c(eAfL[[c]],ebEL[[c]]);\n\t\t\teMwlR[[c]]=c(eAfR[[c]],ebER[[c]]);\n\t\t\teMwl[[c]]=c(eMwlL[[c]],eMwlR[[c]])\n\t\t\t\n\t\t\t# wl small(30)\n\t\t\teSwlL[[c]]=c(eCfL[[c]],edEL[[c]]);\n\t\t\teSwlR[[c]]=c(eCfR[[c]],edER[[c]]);\n\t\t\teSwl[[c]]=c(eSwlL[[c]],eSwlR[[c]])\n\n\t\t\trm(test)\n\t\t}\n\t\t\n\t\n\t# give names of subjects to each list\t\n\tnames(pApAL)= names(yDat)\n\tnames(sApAL)= names(yDat)\n\tnames(pAvBL)= names(yDat)\n\tnames(sAvBL)= names(yDat)\n\tnames(pApAR)= names(yDat)\n\tnames(sApAR)= names(yDat)\n\tnames(pAvBR)= names(yDat)\n\tnames(sAvBR)= names(yDat)\n\tnames(pApA)= names(yDat)\n\tnames(sApA)= names(yDat)\n\tnames(pAvB)= names(yDat)\n\tnames(sAvB)= names(yDat)\n\t\n\t\n\tnames(BwlL)= names(yDat)\n\tnames(MwlL)= names(yDat)\n\tnames(SwlL)= names(yDat)\n\tnames(BwlR)= names(yDat)\n\tnames(MwlR)= names(yDat)\n\tnames(SwlR)= names(yDat)\n\tnames(Bwl)= names(yDat)\n\tnames(Mwl)= names(yDat)\n\tnames(Swl)= names(yDat)\n\n\t\n\tnames(wwL)= names(yDat)\n\tnames(llL)= names(yDat)\n\tnames(wlL)= names(yDat)\n\tnames(pwlL)= names(yDat) # no learning pairs\n\tnames(wwR)= names(yDat)\n\tnames(llR)= names(yDat)#\n\tnames(wlR)= names(yDat)# \n\tnames(pwlR)= names(yDat)# no learning pairs\n\tnames(ww)= names(yDat)# \n\tnames(ll)= names(yDat)# \n\tnames(wl)= names(yDat)\n\tnames(pwl)= names(yDat)# no learning pairs\n\t\n\t\n\tnames(ewwL)= names(yDat)\n\tnames(ellL)= names(yDat)\n\tnames(ewlL)= names(yDat)\n\tnames(epwlL)= names(yDat)# no learning pairs\n\tnames(ewwR)= names(yDat)\n\tnames(ellR)= names(yDat)\n\tnames(ewlR)= names(yDat)\n\tnames(epwlR)= names(yDat)# no learning pairs\n\tnames(eww)= names(yDat)\n\tnames(ell)= names(yDat)\n\tnames(ewl)= names(yDat)\n\tnames(epwl)= names(yDat)# no learning pairs\n\t\n\tnames(error)= names(yDat)\n\tnames(miss)= names(yDat)\n\t\n\t# no learning pairs\n\tnames(eBwlL)= names(yDat)\n\tnames(eMwlL)= names(yDat)\n\tnames(eSwlL)= names(yDat)\n\tnames(eBwlR)= names(yDat)\n\tnames(eMwlR)= names(yDat)\n\tnames(eSwlR)= names(yDat)\n\tnames(eBwl)= names(yDat)\n\tnames(eMwl)= names(yDat)\n\tnames(eSwl)= names(yDat)\n\t\n\tnames(epApAL)= names(yDat)\n\tnames(esApAL)= names(yDat)\n\tnames(epAvBL)= names(yDat)\n\tnames(esAvBL)= names(yDat)\n\tnames(epApAR)= names(yDat)\n\tnames(esApAR)= names(yDat)\n\tnames(epAvBR)= names(yDat)\n\tnames(esAvBR)= names(yDat)\n\tnames(epApA)= names(yDat)\n\tnames(esApA)= names(yDat)\n\tnames(epAvB)= names(yDat)\n\tnames(esAvB)= names(yDat)\n\t\n\t\n\t\n\t\t",
    "created" : 1506597199674.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2341686659",
    "id" : "12F1A04F",
    "lastKnownWriteTime" : 1512217302,
    "last_content_update" : 1512217302273,
    "path" : "~/Github/Control_Conflict/AG/Fitmodel/Fit_codes/index_yDatRLtest.R",
    "project_path" : "Fit_codes/index_yDatRLtest.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}