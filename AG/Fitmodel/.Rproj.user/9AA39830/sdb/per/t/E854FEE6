{
    "collab_server" : "",
    "contents" : "rm(list=ls())\n# set datadir Base\ndir_base=\"/Users/sarajahfari/Github/Control_Conflict/AG/Fitmodel\"\n\n#dir AG_codes, example_codes,\ndir_agcodes=paste(dir_base,'/AG_codes',sep='')\ndir_excodes=paste(dir_base,'/Fit_codes',sep='')\ndir_data=paste(dir_base,'/Fit_data',sep='')\ndir_output=paste(dir_base,'/Fit_output',sep='')\n\n# source checked packages\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"graph\")\nbiocLite(\"RBGL\")\nbiocLite(\"igraph\")\nbiocLite(\"MASS\")\n\n\n# just to check\nlibrary(MASS)\nlibrary(RBGL)\nlibrary(graph)\ninstall.packages(paste(dir_agcodes,'/Rpackage_checked/ggm-1.995-3.tar.gz',sep=''), repos = NULL, type=\"source\")\n\nsessionInfo()\n\n# source AG_codes\nfile.sources = list.files(paste(dir_agcodes,'/rFunctions2',sep=''),pattern=\"*.R\",full.names = TRUE,recursive=T)\nsapply(file.sources,source,.GlobalEnv)\n\n# Read yDat list with single subject beta's for each trial/roi, and make index list for the conditions of interest\nsource(paste(dir_excodes,'/index_yDatRLtest.R',sep=''), chdir = F)\n\n\n#########################################################################\n\n# these are the conditions that are evalauted seperatly in Fitmodels_draft.R\t\ncond1 = list(ewwL,ewwR,ellL,ellR,eBwlL,eBwlR,eMwlL,eMwlR,eSwlL,eSwlR) # correct and incorrect trials, wl = only new pairs (not used in learning)\nnames(cond1)=c('ewwL','ewwR','ellL','ellR','BwlL','BwlR','MwlL','MwlR','SwlL','SwlR')\n\n# select regions that go into graph\nMGO=c(\"PvmPFCNoventri\" ,\"preSMAsmall\", \n      \"maxSTN25exc\",\"GPe30exc\",\"maxGPi30exc\", \"DLPFCposterior\" ,\n      \"Thalamus40exc\",\"PstriatumNoVentri\",\"MotorBA4\")\n\n\nC.Lab = MGO\ncond=cond1\n\n########################################################################\n\n# source the models to use, these are the defined PFC-BG models to evaluate for connectivity/fits \nsource(paste(dir_excodes,'/gomodel_draft.R',sep=''), chdir = F) \n# Now do the connectivity evaluation for each subject, each model/condition, to compute aic/bic and n-fits\nsource(paste(dir_excodes,'/Fitmodels_draft.R',sep=''), chdir = F)\n\nAMT\nBMT\n\napply(BMT[,1:7],1,min)\napply(AMT[,1:7],1,min)\n\n# in both AIC and BIC model7 is the best!\n\n\n#------------------------------------------------------------------------------#\n#           Compute (indvidual) connectivity strengths winning model           #\n#------------------------------------------------------------------------------#\n\n# direct + indirect + hyperdirect\t(winning model ww,ll, wl errors +correct)\t\t\nModel=makeMG(dg=DAG(\n  PstriatumNoVentri~ preSMAsmall +PvmPFCNoventri+ DLPFCposterior,\n  maxSTN25exc~preSMAsmall +PvmPFCNoventri+ DLPFCposterior,\n  GPe30exc~PstriatumNoVentri,\n  maxGPi30exc~PstriatumNoVentri+GPe30exc+maxSTN25exc,\n  Thalamus40exc~maxGPi30exc,\n  MotorBA4~ Thalamus40exc\t\t\t\n),ug=UG(~preSMAsmall*PvmPFCNoventri*DLPFCposterior))\n\n\nEwwL=list() \nEwwR=list()\nEllL=list()\nEllR=list()\nEBwlL=list()\nEBwlR=list()\nEMwlL=list()\nEMwlR=list()\nESwlL=list()\nESwlR=list()\n\nfor (i in 1:length(yDat))\n{\n  EwwL[[i]]=yDat[[i]][cond[[1]][[i]],C.Lab]\n  EwwR[[i]]=yDat[[i]][cond[[2]][[i]],C.Lab]\n  EllL[[i]]=yDat[[i]][cond[[3]][[i]],C.Lab]\n  EllR[[i]]=yDat[[i]][cond[[4]][[i]],C.Lab]\n  EBwlL[[i]]=yDat[[i]][cond[[5]][[i]],C.Lab]\n  EBwlR[[i]]=yDat[[i]][cond[[6]][[i]],C.Lab]\n  EMwlL[[i]]=yDat[[i]][cond[[7]][[i]],C.Lab]\n  EMwlR[[i]]=yDat[[i]][cond[[8]][[i]],C.Lab]\n  ESwlL[[i]]=yDat[[i]][cond[[9]][[i]],C.Lab]\n  ESwlR[[i]]=yDat[[i]][cond[[10]][[i]],C.Lab]\n  \n}\n\n# compute covariance matrix\ncovList.EwwL =lapply(EwwL,cov)\ncovList.EwwR =lapply(EwwR,cov)\ncovList.EllL =lapply(EllL,cov)\ncovList.EllR =lapply(EllR,cov)\ncovList.EBwlL =lapply(EBwlL,cov)\ncovList.EBwlR =lapply(EBwlR,cov)\ncovList.EMwlL =lapply(EMwlL,cov)\ncovList.EMwlR =lapply(EMwlR,cov)\ncovList.ESwlL =lapply(ESwlL,cov)\ncovList.ESwlR =lapply(ESwlR,cov)\n\nfitEwwL=list() \nfitEwwR=list()\nfitEllL=list()\nfitEllR=list()\nfitEBwlL=list()\nfitEBwlR=list()\nfitEMwlL=list()\nfitEMwlR=list()\nfitESwlL=list()\nfitESwlR=list()\n\nfor (i in 1:length(yDat))\n{\n  fitEwwL[[i]]=fitAncestralGraph(Model, covList.EwwL[[i]],dim(EwwL[[i]])[1])\n  fitEwwR[[i]]=fitAncestralGraph(Model, covList.EwwR[[i]],dim(EwwR[[i]])[1])\n  fitEllL[[i]]=fitAncestralGraph(Model, covList.EllL[[i]],dim(EllL[[i]])[1])\n  fitEllR[[i]]=fitAncestralGraph(Model, covList.EllR[[i]],dim(EllR[[i]])[1])\n  fitEBwlL[[i]]=fitAncestralGraph(Model, covList.EBwlL[[i]],dim(EBwlL[[i]])[1])\n  fitEBwlR[[i]]=fitAncestralGraph(Model, covList.EBwlR[[i]],dim(EBwlR[[i]])[1])\n  fitEMwlL[[i]]=fitAncestralGraph(Model,covList.EMwlL[[i]],dim(EMwlL[[i]])[1])\n  fitEMwlR[[i]]=fitAncestralGraph(Model,covList.EMwlR[[i]],dim(EMwlR[[i]])[1])\n  fitESwlL[[i]]=fitAncestralGraph(Model,covList.ESwlL[[i]],dim(ESwlL[[i]])[1])\n  fitESwlR[[i]]=fitAncestralGraph(Model,covList.ESwlR[[i]],dim(ESwlR[[i]])[1])\n  \n}\n\n\n# beta\nbeta.EwwL = matrix(,length(yDat),length(ag.theta(fitEwwL[[1]])))\nbeta.EwwR = matrix(,length(yDat),length(ag.theta(fitEwwR[[1]])))\nbeta.EllL = matrix(,length(yDat),length(ag.theta(fitEllL[[1]])))\nbeta.EllR = matrix(,length(yDat),length(ag.theta(fitEllL[[1]])))\n\nbeta.EBwlL = matrix(,length(yDat),length(ag.theta(fitEBwlL[[1]])))\nbeta.EBwlR = matrix(,length(yDat),length(ag.theta(fitEBwlR[[1]])))\nbeta.EMwlL = matrix(,length(yDat),length(ag.theta(fitEMwlL[[1]])))\nbeta.EMwlR = matrix(,length(yDat),length(ag.theta(fitEMwlR[[1]])))\nbeta.ESwlL = matrix(,length(yDat),length(ag.theta(fitESwlL[[1]])))\nbeta.ESwlR = matrix(,length(yDat),length(ag.theta(fitESwlR[[1]])))\n\n\n\nfor (i in 1:length(yDat))\n  \n{\t\n\n  beta.EwwL[i,] = ag.theta(fitEwwL[[i]])\n  beta.EwwR[i,] = ag.theta(fitEwwR[[i]])\n  beta.EllL[i,] = ag.theta(fitEllL[[i]])\n  beta.EllR[i,] = ag.theta(fitEllR[[i]])\n  beta.EBwlL[i,] = ag.theta(fitEBwlL[[i]])\n  beta.EBwlR[i,] = ag.theta(fitEBwlR[[i]])\n  beta.EMwlL[i,] = ag.theta(fitEMwlL[[i]])\n  beta.EMwlR[i,] = ag.theta(fitEMwlR[[i]])\n  beta.ESwlL[i,] = ag.theta(fitESwlL[[i]])\n  beta.ESwlR[i,] = ag.theta(fitESwlR[[i]])\t\n  \n}\n\n\n#############################################################################################\n########################## now remove columns that are of no interest #######################\n#############################################################################################\n\n\n\nbeta.EwwL = beta.EwwL[,-c(13,16,18:24)]\nbeta.EwwR = beta.EwwR[,-c(13,16,18:24)]\nbeta.EllL = beta.EllL[,-c(13,16,18:24)]\nbeta.EllR = beta.EllR[,-c(13,16,18:24)]\n\nbeta.EBwlL = beta.EBwlL[,-c(13,16,18:24)]\nbeta.EBwlR = beta.EBwlR[,-c(13,16,18:24)]\nbeta.EMwlL = beta.EMwlL[,-c(13,16,18:24)]\nbeta.EMwlR = beta.EMwlR[,-c(13,16,18:24)]\nbeta.ESwlL = beta.ESwlL[,-c(13,16,18:24)]\nbeta.ESwlR = beta.ESwlR[,-c(13,16,18:24)]\n\nbeta.testRLag4.MnoF=list(beta.EwwL,beta.EwwR,beta.EllL,beta.EllR,\n                          beta.EBwlL,beta.EBwlR,beta.EMwlL,beta.EMwlR,beta.ESwlL,beta.ESwlR)\n\nnames(beta.testRLag4.MnoF)=c('EwwL', 'EwwR', 'EllL', 'EllR',\n                              'EBwlL', 'EBwlR','EMwlL', 'EMwlR','ESwlL', 'ESwlR')\n\n# give beta names:\n\nfor (n in 1:length(beta.testRLag4.MnoF))\n{\n  colnames(beta.testRLag4.MnoF[[n]])=c('vmPFC-stn','vmPFC-str','preSMA-stn','preSMA-str','stn-gpi',\n                                     'gpe-gpi','gpi-tha','dlpfc-stn','dlpfc-str','tha-motor','str-gpe','str-gpi'\n                                     ,'vmPFC-preSMA','vmPFC-dlpfc','preSMA-dlpfc')\n  rownames(beta.testRLag4.MnoF[[n]])=names(yDat)\n}\n\n#-------------------------------------------------------------------------------------------#\n#                               Collapse over hands                                         #\n#-------------------------------------------------------------------------------------------#\nbeta_noF=beta.testRLag4.MnoF\n# collapse over left and right\nb.ww=Reduce('+',beta_noF[1:2])/2; b.ll=Reduce('+',beta_noF[3:4])/2; b.wl=Reduce('+',beta_noF[5:10])/6\nb.Bwl=Reduce('+',beta_noF[5:6])/2\nb.Mwl=Reduce('+',beta_noF[7:8])/2\nb.Swl=Reduce('+',beta_noF[9:10])/2\nb.wwllwl=list(b.ww, b.ll, b.wl,b.Bwl,b.Mwl,b.Swl)\nnames(b.wwllwl)=c('b.ww', 'b.ll', 'b.wl','b.Bwl','b.Mwl','b.Swl')\n\n#############################################################################################\n########################## now test whether wl small, medium and big differ            ######\n#############################################################################################\n\n\n# 1) do win-win divistions differ across conditions?\n\nframe.wlB=as.data.frame(as.table(b.wwllwl$b.Bwl))\nframe.wlM=as.data.frame(as.table(b.wwllwl$b.Mwl))\nframe.wlS=as.data.frame(as.table(b.wwllwl$b.Swl))\n\n\nframe.wlB=data.frame(frame.wlB,diff='BIG');colnames(frame.wlB)=c('ppn','connection','beta','diff')\nframe.wlM=data.frame(frame.wlM,diff='MED');colnames(frame.wlM)=c('ppn','connection','beta','diff')\nframe.wlS=data.frame(frame.wlS,diff='SM');colnames(frame.wlS)=c('ppn','connection','beta','diff')\n\nWL.av=as.data.frame(rbind(frame.wlB,frame.wlM,frame.wlS))\n\nWL.size=lm(beta~diff,data= WL.av,random=~1|ppn/diff)\nanova(WL.size) # no effect\n\n# 2) if no, then it is justified to use win-low (reduced over diff)\n# this is already in b.wwllwl\n\n# Evaluate patterns ww, ll, wl for:\n# c('b.ww', 'b.ll', 'b.wl','b.Bwl','b.Mwl','b.Swl')\n# c('vmPFC-stn','vmPFC-str','preSMA-stn','preSMA-str','stn-gpi',\n#   'gpe-gpi','gpi-tha','dlpfc-stn','dlpfc-str','tha-motor','str-gpe','str-gpi'\n#   ,'vmPFC-preSMA','vmPFC-dlpfc','preSMA-dlpfc')\n\n# topdown to striatum\nvmPFC.str=cbind(ww=b.wwllwl$b.ww[,'vmPFC-str'],ll=b.wwllwl$b.ll[,'vmPFC-str'],wl=b.wwllwl$b.wl[,'vmPFC-str'],\n                wlB=b.wwllwl$b.Bwl[,'vmPFC-str'],wlM=b.wwllwl$b.Bwl[,'vmPFC-str'],wlS=b.wwllwl$b.Bwl[,'vmPFC-str'])\n\npreSMA.str=cbind(ww=b.wwllwl$b.ww[,'preSMA-str'],ll=b.wwllwl$b.ll[,'preSMA-str'],wl=b.wwllwl$b.wl[,'preSMA-str'],\n                 wlB=b.wwllwl$b.Bwl[,'preSMA-str'],wlM=b.wwllwl$b.Bwl[,'preSMA-str'],wlS=b.wwllwl$b.Bwl[,'preSMA-str'])\n\ndlpfc.str=cbind(ww=b.wwllwl$b.ww[,'dlpfc-str'],ll=b.wwllwl$b.ll[,'dlpfc-str'],wl=b.wwllwl$b.wl[,'dlpfc-str'],\n                wlB=b.wwllwl$b.Bwl[,'dlpfc-str'],wlM=b.wwllwl$b.Bwl[,'dlpfc-str'],wlS=b.wwllwl$b.Bwl[,'dlpfc-str'])\n\n# topdown to stn\nvmPFC.stn=cbind(ww=b.wwllwl$b.ww[,'vmPFC-stn'],ll=b.wwllwl$b.ll[,'vmPFC-stn'],wl=b.wwllwl$b.wl[,'vmPFC-stn'],\n                wlB=b.wwllwl$b.Bwl[,'vmPFC-stn'],wlM=b.wwllwl$b.Bwl[,'vmPFC-stn'],wlS=b.wwllwl$b.Bwl[,'vmPFC-stn'])\n\npreSMA.stn=cbind(ww=b.wwllwl$b.ww[,'preSMA-stn'],ll=b.wwllwl$b.ll[,'preSMA-stn'],wl=b.wwllwl$b.wl[,'preSMA-stn'],\n                 wlB=b.wwllwl$b.Bwl[,'preSMA-stn'],wlM=b.wwllwl$b.Bwl[,'preSMA-stn'],wlS=b.wwllwl$b.Bwl[,'preSMA-stn'])\n\ndlpfc.stn=cbind(ww=b.wwllwl$b.ww[,'dlpfc-stn'],ll=b.wwllwl$b.ll[,'dlpfc-stn'],wl=b.wwllwl$b.wl[,'dlpfc-stn'],\n                wlB=b.wwllwl$b.Bwl[,'dlpfc-stn'],wlM=b.wwllwl$b.Bwl[,'dlpfc-stn'],wlS=b.wwllwl$b.Bwl[,'dlpfc-stn'])\n\n\n# put into one list, and \nb.topstr=list(vmPFCtostr =vmPFC.str, preSMAtostr=preSMA.str, dlpfctostr= dlpfc.str)\nb.Topstr=Reduce('+', b.topstr)/3\n\nb.topstn=list(vmPFCtostn =vmPFC.stn, preSMAtostn=preSMA.stn, dlpfctostn=dlpfc.stn)\nb.Topstn=Reduce('+', b.topstn)/3\t# deepdown\n\nConnectivity=list(Betaoverhand=b.wwllwl,b.Topstn=b.Topstn,b.Topstr=b.Topstr,ind_PFCSTN=b.topstn,ind_PFCSTR=b.topstr)\n\nsave(list=c('beta.testRLag4.MnoF','BMT','Connectivity'),file=paste(dir_base,'/Fit_output/ConncetivityStrength_withBIC7models_MnoF.rdat',sep=''))\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1506596528724.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3302314377",
    "id" : "E854FEE6",
    "lastKnownWriteTime" : 1507025083,
    "last_content_update" : 1507025083908,
    "path" : "~/Github/Control_Conflict/AG/Fitmodel/Fit_codes/EvaluateFIT_testRL.R",
    "project_path" : "Fit_codes/EvaluateFIT_testRL.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}